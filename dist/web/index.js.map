{"version":3,"sources":["../../src/web/index.js"],"names":["Web","app","web","server","createServer","io","session","connections","redis","use","socket","next","handshake","on","log","msg","uuidFlow","uuid","save","data","eventID","queue","check","emit","get","req","res","sendFile","root","__dirname","port","process","env","PORT","listen","address"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\n\nimport express from 'express';\nimport socketio from 'socket.io';\nimport cookieParser from 'cookie-parser';\nimport uuidv4 from 'uuid/v4';\n\nimport sessions from '../modules/sessions';\nimport logger from '../modules/logger';\n\nimport config from '../config';\n\nfunction Web(app) {\n\t// Instantiate server.\n\tlet web = express();\n\tlet server = http.createServer(web);\n\tlet io = socketio(server);\n\n\t// Connect to RedisStore for sessions.\n\tlet session = sessions(config.connections.redis);\n\tweb.use(session);\n\tweb.use(cookieParser());\n\n\tio.use(function(socket, next) {\n    \tsession(socket.handshake, {}, next);\n\t});\n\n\tio.on('connection', socket => {\n\n\t\tsocket.on('hello', msg => {\n\t\t\tlogger.log('info', 'hello, msg:', msg);\n\t\t\tuuidFlow(msg);\n\t\t});\n\n\n\t\tsocket.on('event', msg => {\n\t\t\tlogger.log('info', 'event, msg:', msg);\n\t\t\tlogger.log('info', socket.handshake.session);\n\n\t\t\tif (!msg.uuid) {\n\t\t\t\tlogger.log('info', 'msg.uuid not specified.');\n\t\t\t\tif (!!socket.handshake.session.uuid) {\n\t\t\t\t\tmsg.uuid = socket.handshake.session.uuid;\n\t\t\t\t\tlogger.log('info', 'session.uuid used in lieu of msg.uuid.', socket.handshake.session.uuid);\n\t\t\t\t} else {\n\t\t\t\t\tuuidFlow(msg);\n\t\t\t\t\tmsg.uuid = socket.handshake.session.uuid;\n\t\t\t\t\tlogger.log('info', 'No session.uuid to use in lieu of msg.uuid. Passed to uuidFlow first to set session.uuid.');\n\t\t\t\t}\n\t\t\t}\n\t\t\tsocket.handshake.session.save();\n\t\t\tlet data = msg.data || {};\n\t\t\t\tdata.eventID = uuidv4();\n\t\t\tapp.queue(data);\n\n\t\t});\n\n\t\tfunction uuidFlow(msg) {\n\t\t\t// Reconcile uuid ad supply one if necessary.\n\t\t\t// msg.uuid is supplied by the client, and is stored in the 1st party cookie.\n\t\t\t// session.uuid is supplied by the client, via the HTTP cookie header, and is stored in the 3rd party cookie.\n\t\t\t\t// session.uuid acts as a back-up, in case 1st party cookie is deleted.\n\t\t\t\t// If the browser has 3rd party cookies disabled, then nothing should really happen because Express will attempt to set it, but it will not work.\n\t\t\t\n\t\t\t// If msg.uuid exists...\n\t\t\tif (!!msg.uuid) {\n\t\t\t\t\n\t\t\t\t// ... and session.uuid exists...\n\t\t\t\tif (!!socket.handshake.session.uuid) {\n\n\t\t\t\t\t// ... compare them...\n\t\t\t\t\tlet check = msg.uuid == socket.handshake.session.uuid;\n\t\t\t\t\tif (!!check) {\n\t\t\t\t\t\tlogger.log('info', 'T|T|T : Do nothing.', socket.handshake.session.uuid, msg.uuid);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.log('info', 'T|F : Respond with session.uuid.', socket.handshake.session.uuid, msg.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t// ... and session.uuid does not exist...\n\t\t\t\t} else {\n\t\t\t\t\tlogger.log('info', 'T|F : Set session.uuid to msg.uuid.', socket.handshake.session.uuid, msg.uuid);\n\t\t\t\t\tsocket.handshake.session.uuid = msg.uuid;\n\t\t\t\t}\n\n\t\t\t// If msg.uuid does not exist...\n\t\t\t} else {\n\n\t\t\t\t// ... and session.uuid exists...\n\t\t\t\tif (!!socket.handshake.session.uuid) {\n\t\t\t\t\tsocket.emit('hello', {uuid: socket.handshake.session.uuid});\n\t\t\t\t\tlogger.log('info', 'F|T : Respond with session.uuid.', socket.handshake.session.uuid, msg.uuid);\n\n\t\t\t\t// ... and session.uuid does not exist...\n\t\t\t\t} else {\n\t\t\t\t\tlet uuid = uuidv4();\n\t\t\t\t\tsocket.handshake.session.uuid = uuid;\n\t\t\t\t\tsocket.emit('hello', {uuid: socket.handshake.session.uuid})\n\t\t\t\t\tlogger.log('info', 'F|T : Respond with newly generated uuid. Set session.uuid.', socket.handshake.session.uuid, msg.uuid);\n\t\t\t\t}\n\n\t\t\t}\t\t\t\n\t\t}\n\n\t});\n\n\tweb.get('/test', (req, res) => {\n\t\tres.sendFile('test.html', { root: __dirname });\n\t});\n\n\t// Start server.\n\tlet port = process.env.PORT || 5000;\n\tserver.listen(port, () => {\n\t\tlogger.log('info', 'Server listening on port', server.address().port);\n\t});\n\n\treturn server;\n}\n\nexport default Web;\n"]}