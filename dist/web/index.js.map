{"version":3,"sources":["../../src/web/index.js"],"names":["Web","app","web","server","createServer","io","session","process","env","REDISCLOUD_URL","use","socket","next","request","res","on","log","test","get","req","send","port","PORT","listen","address"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACjB;AACA,KAAIC,MAAM,wBAAV;AACA,KAAIC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,KAAIG,KAAK,sBAASF,MAAT,CAAT;;AAEA;AACA,KAAIG,UAAU,wBAASC,QAAQC,GAAR,CAAYC,cAArB,CAAd;AACAP,KAAIQ,GAAJ,CAAQJ,OAAR;AACAJ,KAAIQ,GAAJ,CAAQ,6BAAR;;AAEAL,IAAGK,GAAH,CAAO,UAASC,MAAT,EAAiBC,IAAjB,EAAuB;AAC1BN,UAAQK,OAAOE,OAAf,EAAwBF,OAAOE,OAAP,CAAeC,GAAvC,EAA4CF,IAA5C;AACH,EAFD;;AAIAP,IAAGU,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC7B,MAAI,CAACJ,OAAOE,OAAP,CAAeP,OAApB,EAA6B;AAC5B,oBAAOU,GAAP,CAAW,MAAX,EAAmB,4CAAnB;AACAL,UAAOE,OAAP,CAAeP,OAAf,GAAyB;AACxBW,UAAM;AADkB,IAAzB;AAGA;;AAED,mBAAOD,GAAP,CAAW,MAAX,EAAmBL,OAAOE,OAAP,CAAeP,OAAlC;AACA;;;;;;;;;;;;;;AAkBA;AAEA,EA7BD;;AA+BAJ,KAAIgB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAML,GAAN,EAAc;AAC9BA,MAAIM,IAAJ,CAAS,iBAAT;AACA,EAFD;;AAIA;AACA,KAAIC,OAAOd,QAAQC,GAAR,CAAYc,IAAZ,IAAoB,IAA/B;AACAnB,QAAOoB,MAAP,CAAcF,IAAd,EAAoB,YAAM;AACzB,mBAAOL,GAAP,CAAW,MAAX,EAAmB,0BAAnB,EAA+Cb,OAAOqB,OAAP,GAAiBH,IAAhE;AACA,EAFD;;AAIA,QAAOlB,MAAP;AACA;;kBAEcH,G","file":"index.js","sourcesContent":["import http from 'http';\n\nimport express from 'express';\nimport socketio from 'socket.io';\nimport cookieParser from 'cookie-parser';\n\nimport sessions from '../modules/sessions';\nimport logger from '../modules/logger';\n\nfunction Web(app) {\n\t// Instantiate server.\n\tlet web = express();\n\tlet server = http.createServer(web);\n\tlet io = socketio(server);\n\n\t// Connect to RedisStore for sessions.\n\tlet session = sessions(process.env.REDISCLOUD_URL);\n\tweb.use(session);\n\tweb.use(cookieParser());\n\n\tio.use(function(socket, next) {\n    \tsession(socket.request, socket.request.res, next);\n\t});\n\n\tio.on('connection', socket => {\n\t\tif (!socket.request.session) {\n\t\t\tlogger.log('info', 'No socket session data, setting test prop.');\n\t\t\tsocket.request.session = {\n\t\t\t\ttest: 1\n\t\t\t};\n\t\t}\n\n\t\tlogger.log('info', socket.request.session);\n\t\t/*\n\t\t// user data scheme:\n\t\t\t// user id, 'infinite' duration\n\t\t\t// session id, session duration\n\t\tsocket.on('connect', () => {\n\n\t\t});\n\n\t\tsocket.on('message', data => {\n\t\t\t// double check user and session!\n\t\t\t// validate message\n\t\t\t// call App.queueData\n\t\t});\n\n\n\t\tfunction checkUser() {}\n\t\tfunction checkSession() {}\n\t\t*/\n\t\t//app.queue({event: 'socket_connection'});\n\n\t});\n\n\tweb.get('/test', (req, res) => {\n\t\tres.send('../../test.html');\n\t});\n\n\t// Start server.\n\tlet port = process.env.PORT || 5000;\n\tserver.listen(port, () => {\n\t\tlogger.log('info', 'Server listening on port', server.address().port);\n\t});\n\n\treturn server;\n}\n\nexport default Web;\n"]}