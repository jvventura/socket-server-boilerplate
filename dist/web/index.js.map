{"version":3,"sources":["../../src/web/index.js"],"names":["Web","app","web","server","createServer","io","session","process","env","REDISCLOUD_URL","use","cookieParser","sharedsession","autoSave","on","socket","queue","test","port","PORT","listen","logger","log","address"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACjB;AACA,KAAIC,MAAM,wBAAV;AACA,KAAIC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,KAAIG,KAAK,sBAASF,MAAT,CAAT;;AAEA;AACA,KAAIG,UAAU,wBAASC,QAAQC,GAAR,CAAYC,cAArB,CAAd;AACAP,KAAIQ,GAAJ,CAAQJ,OAAR;AACAJ,KAAIQ,GAAJ,CAAQC,cAAR;AACAN,IAAGK,GAAH,CAAOE,cAAcN,OAAd,EAAuB;AAC1BO,YAAS;AADiB,EAAvB,CAAP;;AAIAR,IAAGS,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC7B;;;;;;;;;;;;;;;;;;;;AAuBAC,SAAOD,EAAP,CAAU,SAAV,EAAqB,YAAM;AAC1Bb,OAAIe,KAAJ,CAAU,EAACC,MAAK,CAAN,EAAV;AACA,GAFD;AAGA,EA3BD;;AA6BA;AACA,KAAIC,OAAOX,QAAQC,GAAR,CAAYW,IAAZ,IAAoB,IAA/B;AACAhB,QAAOiB,MAAP,CAAcF,IAAd,EAAoB,YAAM;AACzBG,SAAOC,GAAP,CAAW,MAAX,EAAmB,gCAAnB,EAAqDnB,OAAOoB,OAAP,GAAiBL,IAAtE;AACA,EAFD;;AAIA,QAAOf,MAAP;AACA;;kBAEcH,G","file":"index.js","sourcesContent":["import http from 'http';\n\nimport express from 'express';\nimport socketio from 'socket.io';\nimport sharedSession from 'express-socket.io-session';\n\nimport sessions from '../modules/sessions';\n\nfunction Web(app) {\n\t// Instantiate server.\n\tlet web = express();\n\tlet server = http.createServer(web);\n\tlet io = socketio(server);\n\n\t// Connect to RedisStore for sessions.\n\tlet session = sessions(process.env.REDISCLOUD_URL);\n\tweb.use(session);\n\tweb.use(cookieParser());\n\tio.use(sharedsession(session, {\n\t    autoSave:true\n\t}));\n\n\tio.on('connection', socket => {\n\t\t/*\n\t\t// user data scheme:\n\t\t\t// user id, 'infinite' duration\n\t\t\t// session id, session duration\n\t\tsocket.on('connect', () => {\n\t\t\tif (!socket.handshake.session) {\n\t\t\t\tFunction.compose(checkUser, checkSession); // dunno if this will work\n\t\t\t\t// if no user id supplied, generate a new one\n\t\t\t\t// if no session is supplied, generate a new one\n\t\t\t}\n\t\t});\n\n\t\tsocket.on('message', data => {\n\t\t\t// double check user and session!\n\t\t\t// validate message\n\t\t\t// call App.queueData\n\t\t});\n\n\n\t\tfunction checkUser() {}\n\t\tfunction checkSession() {}\n\t\t*/\n\n\t\tsocket.on('connect', () => {\n\t\t\tapp.queue({test:1});\n\t\t});\n\t});\n\n\t// Start server.\n\tlet port = process.env.PORT || 5000;\n\tserver.listen(port, () => {\n\t\tlogger.log('info', 'Server listening on port %port', server.address().port);\n\t});\n\n\treturn server;\n}\n\nexport default Web;\n"]}