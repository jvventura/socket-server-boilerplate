{"version":3,"sources":["../../src/app/index.js"],"names":["App","connections","jackrabbit","process","env","CLOUDAMQP_URL","mongoose","MONGODB_URI","on","_onConnected","bind","rabbit","queue","name","prefetch","durabe","_onReady","emit","log","data","publish","key","consume","job","ack","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBA4De,YAAW;AACzB,QAAO,IAAIA,GAAJ,EAAP;AACA,C;;AA9DD;;;;AAEA;;;;AACA;;;;;;IAEMA,G;;;AACL,gBAAc;AAAA;;AAAA;;AAGb,QAAKC,WAAL,GAAmB,yBAAY;AAC9BC,eAAYC,QAAQC,GAAR,CAAYC,aAAZ,IAA6B,kBADX;AAE9BC,aAAUH,QAAQC,GAAR,CAAYG,WAAZ,IAA2B;AAFP,GAAZ,CAAnB;;AAKA,QAAKN,WAAL,CAAiBO,EAAjB,CAAoB,OAApB,EAA6B,MAAKC,YAAL,CAAkBC,IAAlB,OAA7B;;AAEA,QAAKC,MAAL;AAVa;AAWb;;AAED;;;;iCAEe;AACd;;;;AAIA,QAAKA,MAAL,GAAc,KAAKV,WAAL,CAAiBW,KAAjB,CAAuBA,KAAvB,CAA6B;AAC1CC,UAAM,YADoC;AAE1CC,cAAU,CAFgC;AAG1CC,YAAQ;AAHkC,IAA7B,CAAd;;AAMA,QAAKC,QAAL;AACA;;;6BAEU;AACV,QAAKC,IAAL,CAAU,OAAV;AACA,oBAAOC,GAAP,CAAW,MAAX,EAAmB,aAAnB;AACA;;;4BAES;AACT,QAAKD,IAAL,CAAU,MAAV;AACA,oBAAOC,GAAP,CAAW,MAAX,EAAmB,oBAAnB;AACA;;AAED;AACC;;;;wBAEKC,I,EAAM;AACX,QAAKlB,WAAL,CAAiBW,KAAjB,CAAuBQ,OAAvB,CAA+BD,IAA/B,EAAqC,EAACE,KAAK,YAAN,EAArC;AACA;;;4BAES;AACT,QAAKV,MAAL,CAAYW,OAAZ,CAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,qBAAON,GAAP,CAAW,MAAX,EAAmBK,GAAnB;AACAC;AACA,IAHD;AAIA;;;EApDgB,iBAAOC,Y","file":"index.js","sourcesContent":["import events from 'events';\n\nimport connections from './connector';\nimport logger from '../modules/logger';\n\nclass App extends events.EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.connections = connections({\n\t\t\tjackrabbit: process.env.CLOUDAMQP_URL || 'amqp://localhost',\n\t\t\tmongoose: process.env.MONGODB_URI || 'mongodb://localhost:27017'\n\t\t});\n\n\t\tthis.connections.on('ready', this._onConnected.bind(this));\n\n\t\tthis.rabbit;\n\t}\n\n\t// 'Private' methods.\n\n\t_onConnected() {\n\t\t/*\n\t\tthis.Events = this.connections.db; // instantiate schema (or connection to whatever db);\n\t\t*/\n\n\t\tthis.rabbit = this.connections.queue.queue({\n\t\t\tname: 'jobs.event',\n\t\t\tprefetch: 5,\n\t\t\tdurabe: true\n\t\t});\n\n\t\tthis._onReady();\n\t}\n\n\t_onReady() {\n\t\tthis.emit('ready');\n\t\tlogger.log('info', 'App: Ready!')\n\t}\n\n\t_onLost() {\n\t\tthis.emit('lost');\n\t\tlogger.log('info', 'App: Disconnected.');\n\t}\n\n\t// 'Public' methods.\n\t\t// process event (pass msg data to queue for worker)\n\n\tqueue(data) {\n\t\tthis.connections.queue.publish(data, {key: 'jobs.event'});\n\t}\n\n\tprocess() {\n\t\tthis.rabbit.consume((job, ack) => {\n\t\t\tlogger.log('info', job);\n\t\t\tack();\n\t\t});\n\t}\n}\n\nexport default function() {\n\treturn new App();\n}"]}