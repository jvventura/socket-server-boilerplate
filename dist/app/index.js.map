{"version":3,"sources":["../../src/app/index.js"],"names":["App","connections","jackrabbit","process","env","CLOUDAMQP_URL","mongoose","MONGODB_URI","on","_onConnected","Events","db","queue","create","_onReady","emit","log","data","publish","handle","job","ack","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBAgDe,YAAW;AACzB,QAAO,IAAIA,GAAJ,EAAP;AACA,C;;AAlDD;;;;AAEA;;;;AACA;;;;;;IAEMA,G;;;AACL,gBAAc;AAAA;;AAAA;;AAGb,QAAKC,WAAL,GAAmB,yBAAY;AAC9BC,eAAYC,QAAQC,GAAR,CAAYC,aADM;AAE9BC,aAAUH,QAAQC,GAAR,CAAYG;AAFQ,GAAZ,CAAnB;;AAKA,QAAKN,WAAL,CAAiBO,EAAjB,CAAoB,OAApB,EAA6B,MAAKC,YAAlC;AARa;AASb;;AAED;;;;iCAEe;AACd,QAAKC,MAAL,GAAc,KAAKT,WAAL,CAAiBU,EAA/B,CADc,CACqB;AACnC,QAAKV,WAAL,CAAiBW,KAAjB,CAAuBC,MAAvB,CAA8B,KAAKC,QAAnC,EAFc,CAEgC;AAC9C;;;6BAEU;AACV,QAAKC,IAAL,CAAU,OAAV;AACA,oBAAOC,GAAP,CAAW,MAAX,EAAmB,aAAnB;AACA;;;4BAES;AACT,QAAKD,IAAL,CAAU,MAAV;AACA,oBAAOC,GAAP,CAAW,MAAX,EAAmB,oBAAnB;AACA;;AAED;AACC;;;;wBAEKC,I,EAAM;AACX,QAAKhB,WAAL,CAAiBW,KAAjB,CAAuBM,OAAvB,CAA+B,YAA/B,EAA6CD,IAA7C;AACA;;;4BAES;AACT,QAAKhB,WAAL,CAAiBkB,MAAjB,CAAwB,YAAxB,EAAsC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnD,qBAAOL,GAAP,CAAW,MAAX,EAAmBI,GAAnB;AACA,IAFD;AAGA;;;EAxCgB,iBAAOE,Y","file":"index.js","sourcesContent":["import events from 'events';\n\nimport connections from './connector';\nimport logger from '../modules/logger';\n\nclass App extends events.EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.connections = connections({\n\t\t\tjackrabbit: process.env.CLOUDAMQP_URL,\n\t\t\tmongoose: process.env.MONGODB_URI\n\t\t});\n\n\t\tthis.connections.on('ready', this._onConnected);\n\t}\n\n\t// 'Private' methods.\n\n\t_onConnected() {\n\t\tthis.Events = this.connections.db; // instantiate schema (or connection to whatever db);\n\t\tthis.connections.queue.create(this._onReady); // create the queue then emit ready event\n\t}\n\n\t_onReady() {\n\t\tthis.emit('ready');\n\t\tlogger.log('info', 'App: Ready!')\n\t}\n\n\t_onLost() {\n\t\tthis.emit('lost');\n\t\tlogger.log('info', 'App: Disconnected.');\n\t}\n\n\t// 'Public' methods.\n\t\t// process event (pass msg data to queue for worker)\n\n\tqueue(data) {\n\t\tthis.connections.queue.publish('jobs.event', data);\n\t}\n\n\tprocess() {\n\t\tthis.connections.handle('jobs.event', (job, ack) => {\n\t\t\tlogger.log('info', job);\n\t\t});\n\t}\n}\n\nexport default function() {\n\treturn new App();\n}"]}