{"version":3,"sources":["../../src/app/index.js"],"names":["App","connections","jackrabbit","amqp","mongoose","mongo","on","_onConnected","bind","rabbit","db","events","queue","name","prefetch","durabe","_onReady","emit","log","data","publish","key","self","consume","job","ack","eventName","type","count","event","save","err","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBA6Fe,YAAW;AACzB,QAAO,IAAIA,GAAJ,EAAP;AACA,C;;AA/FD;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;IAEMA,G;;;AACL,gBAAc;AAAA;;AAAA;;AAGb,QAAKC,WAAL,GAAmB,yBAAY;AAC9BC,eAAY,iBAAOD,WAAP,CAAmBE,IADD;AAE9BC,aAAU,iBAAOH,WAAP,CAAmBI;AAFC,GAAZ,CAAnB;;AAKA,QAAKJ,WAAL,CAAiBK,EAAjB,CAAoB,OAApB,EAA6B,MAAKC,YAAL,CAAkBC,IAAlB,OAA7B;;AAEA,QAAKC,MAAL,GAAc,EAAd;AACA,QAAKC,EAAL;AAXa;AAYb;;AAED;;;;iCAEe;;AAEd;AACA,QAAKD,MAAL,CAAYE,MAAZ,GAAqB,KAAKV,WAAL,CAAiBW,KAAjB,CAAuBA,KAAvB,CAA6B;AACjDC,UAAM,YAD2C;AAEjDC,cAAU,CAFuC;AAGjDC,YAAQ;AAHyC,IAA7B,CAArB;;AAMA,QAAKN,MAAL,CAAYC,EAAZ,GAAiB,KAAKT,WAAL,CAAiBW,KAAjB,CAAuBA,KAAvB,CAA6B;AAC7CC,UAAM,SADuC;AAE7CC,cAAU,CAFmC;AAG7CC,YAAQ;AAHqC,IAA7B,CAAjB;;AAMA;AACA,QAAKL,EAAL,GAAU,KAAKT,WAAL,CAAiBS,EAA3B;;AAGA,QAAKM,QAAL;AACA;;;6BAEU;AACV,QAAKC,IAAL,CAAU,OAAV;AACA,oBAAOC,GAAP,CAAW,MAAX,EAAmB,aAAnB;AACA;;;4BAES;AACT,QAAKD,IAAL,CAAU,MAAV;AACA,oBAAOC,GAAP,CAAW,MAAX,EAAmB,oBAAnB;AACA;;AAED;AACC;;;;wBAEKC,I,EAAM;AACX,QAAKlB,WAAL,CAAiBW,KAAjB,CAAuBQ,OAAvB,CAA+BD,IAA/B,EAAqC,EAACE,KAAK,YAAN,EAArC;AACA;;;4BAES;AAAA;;AACT,OAAIC,OAAO,IAAX;;AAEA,QAAKb,MAAL,CAAYE,MAAZ,CAAmBY,OAAnB,CAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC,QAAIC,YAAYF,IAAIG,IAAJ,IAAY,cAA5B;AACA,QAAIC,QAAQ,CAAZ;;AAEA;AACA,WAAK3B,WAAL,CAAiBW,KAAjB,CAAuBQ,OAAvB,CAA+BI,GAA/B,EAAoC,EAACH,KAAK,SAAN,EAApC;;AAEAI;AACA,IARD;;AAUA,QAAKhB,MAAL,CAAYC,EAAZ,CAAea,OAAf,CAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpC,QAAII,QAAQ,yBAAUL,GAAV,CAAZ;AACAK,UAAMC,IAAN,CAAW,eAAO;AACjB,SAAIC,GAAJ,EAAS;AACR,uBAAOb,GAAP,CAAW,MAAX,EAAmB,gBAAnB,EAAqCa,GAArC;AACA;AACA,MAHD,MAGO;AACN,uBAAOb,GAAP,CAAW,MAAX,EAAmB,0BAAnB,EAA+CM,GAA/C;AACAC;AACA;AACD,KARD;AASA,IAXD;AAYA;;;EAjFgB,iBAAOO,Y","file":"index.js","sourcesContent":["import events from 'events';\n\nimport connections from './connector';\nimport logger from '../modules/logger';\n\nimport config from '../config';\n\nimport Event from './EventModel';\n\nclass App extends events.EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.connections = connections({\n\t\t\tjackrabbit: config.connections.amqp,\n\t\t\tmongoose: config.connections.mongo\n\t\t});\n\n\t\tthis.connections.on('ready', this._onConnected.bind(this));\n\n\t\tthis.rabbit = {};\n\t\tthis.db;\n\t}\n\n\t// 'Private' methods.\n\n\t_onConnected() {\n\n\t\t// Setup jackrabbit queues.\n\t\tthis.rabbit.events = this.connections.queue.queue({\n\t\t\tname: 'jobs.event',\n\t\t\tprefetch: 5,\n\t\t\tdurabe: true\n\t\t});\n\n\t\tthis.rabbit.db = this.connections.queue.queue({\n\t\t\tname: 'jobs.db',\n\t\t\tprefetch: 5,\n\t\t\tdurabe: true\n\t\t});\n\n\t\t// Reference mongoose connection.\n\t\tthis.db = this.connections.db;\n\n\n\t\tthis._onReady();\n\t}\n\n\t_onReady() {\n\t\tthis.emit('ready');\n\t\tlogger.log('info', 'App: Ready!')\n\t}\n\n\t_onLost() {\n\t\tthis.emit('lost');\n\t\tlogger.log('info', 'App: Disconnected.');\n\t}\n\n\t// 'Public' methods.\n\t\t// process event (pass msg data to queue for worker)\n\n\tqueue(data) {\n\t\tthis.connections.queue.publish(data, {key: 'jobs.event'});\n\t}\n\n\tprocess() {\n\t\tlet self = this;\n\n\t\tthis.rabbit.events.consume((job, ack) => {\n\t\t\tlet eventName = job.type || 'unclassified';\n\t\t\tlet count = 2;\n\n\t\t\t// Publish any \"sub-jobs\".\n\t\t\tthis.connections.queue.publish(job, {key: 'jobs.db'});\n\n\t\t\tack();\n\t\t});\n\n\t\tthis.rabbit.db.consume((job, ack) => {\n\t\t\tlet event = new Event(job);\n\t\t\tevent.save(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.log('warn', 'App: db error.', err);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tlogger.log('info', 'App: db processed event.', job);\n\t\t\t\t\tack();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport default function() {\n\treturn new App();\n}"]}